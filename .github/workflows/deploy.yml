name: Build, Test, and Deploy to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, closed ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        rm -rf node_modules package-lock.json
        npm install --include=optional
    
    - name: Type check frontend
      run: |
        cd frontend
        npm run type-check
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  test-backend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todo_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup test database
      run: |
        cd backend
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/todo_db_test
        python setup_db.py
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todo_db_test
    
    - name: Run backend tests (placeholder)
      run: |
        cd backend
        echo "Backend tests would run here"
        python -c "import app; print('Backend imports successfully')"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todo_db_test

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Deploy Credentials
      run: |
        if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
          echo "::error::RENDER_API_KEY secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.RENDER_BACKEND_SERVICE_ID }}" ]; then
          echo "::error::RENDER_BACKEND_SERVICE_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.RENDER_FRONTEND_SERVICE_ID }}" ]; then
          echo "::error::RENDER_FRONTEND_SERVICE_ID secret is not set"
          exit 1
        fi
        echo "‚úÖ All required secrets are present"
    
    - name: Deploy Backend to Render
      id: deploy-backend
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
    
    - name: Backend Deploy Status
      run: |
        echo "üöÄ Backend deployment triggered successfully!"
        echo "Check deployment progress at: https://dashboard.render.com/web/${{ secrets.RENDER_BACKEND_SERVICE_ID }}"
    
    - name: Deploy Frontend to Render
      id: deploy-frontend
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
    
    - name: Frontend Deploy Status
      run: |
        echo "üöÄ Frontend deployment triggered successfully!"
        echo "Check deployment progress at: https://dashboard.render.com/static/${{ secrets.RENDER_FRONTEND_SERVICE_ID }}"
    
    - name: Deployment Summary
      if: always()
      run: |
        echo "## üöÄ Deployment Summary"
        echo "Backend: ${{ steps.deploy-backend.outcome == 'success' && '‚úÖ Triggered' || '‚ùå Failed' }}"
        echo "Frontend: ${{ steps.deploy-frontend.outcome == 'success' && '‚úÖ Triggered' || '‚ùå Failed' }}"
        echo ""
        echo "### Deployment Details:"
        echo "- Backend URL: https://todo-app-api-bf0p.onrender.com"
        echo "- Frontend URL: https://todo-app-frontend-fcip.onrender.com"
        echo "- Monitor deployment progress on Render dashboard"
        echo ""
        if [ "${{ steps.deploy-backend.outcome }}" == "failure" ] || [ "${{ steps.deploy-frontend.outcome }}" == "failure" ]; then
          echo "::error::One or more deployment triggers failed. Check the logs above for details."
          exit 1
        fi
        echo "‚úÖ All deployments triggered successfully!"