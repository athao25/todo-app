name: Build, Test, and Deploy to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Type check frontend
      run: |
        cd frontend
        npm run type-check
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todo_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup test database
      run: |
        cd backend
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/todo_db_test
        python setup_db.py
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todo_db_test
    
    - name: Run backend tests (placeholder)
      run: |
        cd backend
        echo "Backend tests would run here"
        python -c "import app; print('Backend imports successfully')"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todo_db_test

  deploy:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Deploy Credentials
      run: |
        if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
          echo "::error::RENDER_API_KEY secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.RENDER_BACKEND_SERVICE_ID }}" ]; then
          echo "::error::RENDER_BACKEND_SERVICE_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.RENDER_FRONTEND_SERVICE_ID }}" ]; then
          echo "::error::RENDER_FRONTEND_SERVICE_ID secret is not set"
          exit 1
        fi
        echo "‚úÖ All required secrets are present"
    
    - name: Deploy Backend to Render
      id: deploy-backend
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
      continue-on-error: true
    
    - name: Poll Backend Deployment Status
      if: steps.deploy-backend.outcome == 'success'
      run: |
        echo "üîÑ Polling backend deployment status..."
        SERVICE_ID="${{ secrets.RENDER_BACKEND_SERVICE_ID }}"
        API_KEY="${{ secrets.RENDER_API_KEY }}"
        MAX_ATTEMPTS=60  # 10 minutes max (60 * 10 seconds)
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          # Get latest deployment
          DEPLOY_RESPONSE=$(curl -s -H "Authorization: Bearer $API_KEY" \
            "https://api.render.com/v1/services/$SERVICE_ID/deploys?limit=1")
          
          # Extract deploy ID and status
          DEPLOY_ID=$(echo "$DEPLOY_RESPONSE" | jq -r '.[0].id // empty')
          DEPLOY_STATUS=$(echo "$DEPLOY_RESPONSE" | jq -r '.[0].status // empty')
          
          if [ -z "$DEPLOY_ID" ]; then
            echo "‚ùå Failed to get deployment info"
            exit 1
          fi
          
          echo "üìã Deploy ID: $DEPLOY_ID, Status: $DEPLOY_STATUS"
          
          case "$DEPLOY_STATUS" in
            "live")
              echo "‚úÖ Backend deployment completed successfully!"
              echo "backend-deploy-id=$DEPLOY_ID" >> $GITHUB_OUTPUT
              break
              ;;
            "build_failed"|"update_failed"|"canceled")
              echo "‚ùå Backend deployment failed with status: $DEPLOY_STATUS"
              exit 1
              ;;
            "created"|"build_in_progress"|"update_in_progress")
              echo "‚è≥ Deployment in progress... (attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)"
              sleep 10
              ;;
            *)
              echo "‚ùì Unknown status: $DEPLOY_STATUS"
              sleep 10
              ;;
          esac
          
          ATTEMPT=$((ATTEMPT+1))
        done
        
        if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
          echo "‚ùå Backend deployment timed out after 10 minutes"
          exit 1
        fi
    
    - name: Check Backend Deploy Status
      run: |
        if [ "${{ steps.deploy-backend.outcome }}" == "failure" ]; then
          echo "::error::Backend deployment action failed. Check Render dashboard for details."
          echo "::error::Possible causes: Invalid API key, service ID not found, or action timeout"
          exit 1
        fi
        echo "‚úÖ Backend deployment validation completed"
    
    - name: Deploy Frontend to Render
      id: deploy-frontend
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
      continue-on-error: true
    
    - name: Poll Frontend Deployment Status
      if: steps.deploy-frontend.outcome == 'success'
      run: |
        echo "üîÑ Polling frontend deployment status..."
        SERVICE_ID="${{ secrets.RENDER_FRONTEND_SERVICE_ID }}"
        API_KEY="${{ secrets.RENDER_API_KEY }}"
        MAX_ATTEMPTS=60  # 10 minutes max (60 * 10 seconds)
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          # Get latest deployment
          DEPLOY_RESPONSE=$(curl -s -H "Authorization: Bearer $API_KEY" \
            "https://api.render.com/v1/services/$SERVICE_ID/deploys?limit=1")
          
          # Extract deploy ID and status
          DEPLOY_ID=$(echo "$DEPLOY_RESPONSE" | jq -r '.[0].id // empty')
          DEPLOY_STATUS=$(echo "$DEPLOY_RESPONSE" | jq -r '.[0].status // empty')
          
          if [ -z "$DEPLOY_ID" ]; then
            echo "‚ùå Failed to get deployment info"
            exit 1
          fi
          
          echo "üìã Deploy ID: $DEPLOY_ID, Status: $DEPLOY_STATUS"
          
          case "$DEPLOY_STATUS" in
            "live")
              echo "‚úÖ Frontend deployment completed successfully!"
              echo "frontend-deploy-id=$DEPLOY_ID" >> $GITHUB_OUTPUT
              break
              ;;
            "build_failed"|"update_failed"|"canceled")
              echo "‚ùå Frontend deployment failed with status: $DEPLOY_STATUS"
              exit 1
              ;;
            "created"|"build_in_progress"|"update_in_progress")
              echo "‚è≥ Deployment in progress... (attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)"
              sleep 10
              ;;
            *)
              echo "‚ùì Unknown status: $DEPLOY_STATUS"
              sleep 10
              ;;
          esac
          
          ATTEMPT=$((ATTEMPT+1))
        done
        
        if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
          echo "‚ùå Frontend deployment timed out after 10 minutes"
          exit 1
        fi
    
    - name: Check Frontend Deploy Status
      run: |
        if [ "${{ steps.deploy-frontend.outcome }}" == "failure" ]; then
          echo "::error::Frontend deployment action failed. Check Render dashboard for details."
          echo "::error::Possible causes: Invalid API key, service ID not found, or action timeout"
          exit 1
        fi
        echo "‚úÖ Frontend deployment validation completed"
    
    - name: Deployment Summary
      if: always()
      run: |
        echo "## üöÄ Deployment Summary"
        echo "Backend: ${{ steps.deploy-backend.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
        echo "Frontend: ${{ steps.deploy-frontend.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
        echo ""
        echo "### Deployment Details:"
        echo "- Backend URL: https://todo-app-api-bf0p.onrender.com"
        echo "- Frontend URL: https://todo-app-frontend-fcip.onrender.com"
        echo "- Both services should now be live and ready for E2E testing"
        echo ""
        if [ "${{ steps.deploy-backend.outcome }}" == "failure" ] || [ "${{ steps.deploy-frontend.outcome }}" == "failure" ]; then
          echo "::error::One or more deployments failed. Check the logs above for details."
          exit 1
        fi
        echo "‚úÖ All deployments completed successfully - ready for E2E tests!"

  e2e-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Wait for deployment to be ready
      run: |
        echo "üîç Verifying deployed application health..."
        FRONTEND_URL="${{ secrets.DEPLOYED_APP_URL }}"
        BACKEND_URL="https://todo-app-api-bf0p.onrender.com"
        MAX_ATTEMPTS=30
        
        # Test frontend health
        echo "Testing frontend at: $FRONTEND_URL"
        for i in $(seq 1 $MAX_ATTEMPTS); do
          if curl -f -s -o /dev/null --max-time 10 "$FRONTEND_URL"; then
            echo "‚úÖ Frontend is responding!"
            break
          fi
          echo "‚è≥ Frontend not ready... (attempt $i/$MAX_ATTEMPTS)"
          if [ $i -eq $MAX_ATTEMPTS ]; then
            echo "‚ùå Frontend failed to respond after $MAX_ATTEMPTS attempts"
            exit 1
          fi
          sleep 10
        done
        
        # Test backend health
        echo "Testing backend at: $BACKEND_URL/api/health"
        for i in $(seq 1 $MAX_ATTEMPTS); do
          HEALTH_RESPONSE=$(curl -f -s --max-time 10 "$BACKEND_URL/api/health" || echo "failed")
          if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
            echo "‚úÖ Backend health check passed!"
            break
          fi
          echo "‚è≥ Backend not healthy... (attempt $i/$MAX_ATTEMPTS)"
          if [ $i -eq $MAX_ATTEMPTS ]; then
            echo "‚ùå Backend failed health check after $MAX_ATTEMPTS attempts"
            echo "Last response: $HEALTH_RESPONSE"
            exit 1
          fi
          sleep 10
        done
        
        echo "üéâ Both frontend and backend are healthy and ready for E2E testing!"
    
    - name: Run Playwright E2E tests
      run: npx cross-env BASE_ENV=staging playwright test --config=tests/playwright.config.ts
      env:
        BASE_URL: ${{ secrets.DEPLOYED_APP_URL }}
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: tests/playwright-report/
        retention-days: 30
    
    - name: E2E Test Results
      if: always()
      run: |
        echo "## üß™ E2E Test Results"
        echo "Frontend URL: ${{ secrets.DEPLOYED_APP_URL }}"
        echo "Backend URL: https://todo-app-api-bf0p.onrender.com"
        echo ""
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ All E2E tests passed - deployment quality gate satisfied"
          echo "üéâ Todo App is fully deployed and functioning correctly!"
          echo ""
          echo "### Quick Links:"
          echo "- üåê Live App: ${{ secrets.DEPLOYED_APP_URL }}"
          echo "- üîß API Health: https://todo-app-api-bf0p.onrender.com/api/health"
          echo "- üìä Playwright Report: Available in workflow artifacts"
        else
          echo "‚ùå E2E tests failed - deployment may have issues"
          echo "üîç Check the Playwright report artifact for detailed test results"
          echo "üö® The deployment completed but quality gates failed"
          exit 1
        fi