{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
		"name": "Todo API Collection",
		"description": "Complete API collection for Todo Application testing. Includes all CRUD operations, validation tests, and edge cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check - Get Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status property\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('status');",
									"    pm.expect(responseJson.status).to.eql('healthy');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"health"
							]
						},
						"description": "Check if the API server is running and healthy"
					},
					"response": []
				}
			]
		},
		{
			"name": "Todo CRUD Operations",
			"item": [
				{
					"name": "Create Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Todo created successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('completed');",
									"    pm.expect(responseJson).to.have.property('created_at');",
									"    pm.expect(responseJson).to.have.property('updated_at');",
									"    ",
									"    pm.expect(responseJson.title).to.eql(pm.collectionVariables.get('test_todo_title'));",
									"    pm.expect(responseJson.completed).to.be.false;",
									"    ",
									"    // Save todo ID for other requests",
									"    pm.collectionVariables.set('created_todo_id', responseJson.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set test data",
									"pm.collectionVariables.set('test_todo_title', 'Test Todo - ' + new Date().getTime());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{test_todo_title}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						},
						"description": "Create a new todo item"
					},
					"response": []
				},
				{
					"name": "Get All Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Todos have required structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 0) {",
									"        const todo = responseJson[0];",
									"        pm.expect(todo).to.have.property('id');",
									"        pm.expect(todo).to.have.property('title');",
									"        pm.expect(todo).to.have.property('completed');",
									"        pm.expect(todo).to.have.property('created_at');",
									"        pm.expect(todo).to.have.property('updated_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						},
						"description": "Retrieve all todo items"
					},
					"response": []
				},
				{
					"name": "Get Todo by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Todo has correct structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('completed');",
									"    pm.expect(responseJson).to.have.property('created_at');",
									"    pm.expect(responseJson).to.have.property('updated_at');",
									"    ",
									"    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('created_todo_id')));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos/{{created_todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{created_todo_id}}"
							]
						},
						"description": "Retrieve a specific todo by its ID"
					},
					"response": []
				},
				{
					"name": "Update Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Todo updated successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('completed');",
									"    ",
									"    pm.expect(responseJson.title).to.eql(pm.collectionVariables.get('updated_todo_title'));",
									"    pm.expect(responseJson.completed).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set updated title",
									"pm.collectionVariables.set('updated_todo_title', 'Updated Todo - ' + new Date().getTime());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{updated_todo_title}}\",\n    \"completed\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos/{{created_todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{created_todo_id}}"
							]
						},
						"description": "Update an existing todo item"
					},
					"response": []
				},
				{
					"name": "Delete Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos/{{created_todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{created_todo_id}}"
							]
						},
						"description": "Delete a todo item by ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation Tests",
			"item": [
				{
					"name": "Create Todo - Empty Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message for empty title\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Title cannot be empty');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						},
						"description": "Test validation for empty todo title"
					},
					"response": []
				},
				{
					"name": "Create Todo - Whitespace Only Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message for whitespace title\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Title cannot be empty');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"   \"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						},
						"description": "Test validation for whitespace-only todo title"
					},
					"response": []
				},
				{
					"name": "Create Todo - Max Length Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Max length title accepted\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson.title.length).to.eql(250);",
									"    ",
									"    // Save ID for cleanup",
									"    pm.collectionVariables.set('max_length_todo_id', responseJson.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						},
						"description": "Test with maximum allowed title length (250 characters)"
					},
					"response": []
				},
				{
					"name": "Create Todo - Exceeds Max Length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message for too long title\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Title cannot exceed 250 characters');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						},
						"description": "Test with title exceeding maximum length (251 characters)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Edge Cases & Special Characters",
			"item": [
				{
					"name": "Create Todo - Special Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Special characters handled correctly\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson.title).to.include('!@#$%^&*()');",
									"    ",
									"    // Save ID for cleanup",
									"    pm.collectionVariables.set('special_chars_todo_id', responseJson.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Special Characters: !@#$%^&*()_+-={}[]|\\\\:;\\\"'<>?,./ Test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						},
						"description": "Test with special characters and symbols"
					},
					"response": []
				},
				{
					"name": "Create Todo - Unicode & Emojis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Unicode and emojis handled correctly\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson.title).to.include('📝');",
									"    pm.expect(responseJson.title).to.include('✅');",
									"    ",
									"    // Save ID for cleanup",
									"    pm.collectionVariables.set('unicode_todo_id', responseJson.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Unicode Test: 📝 Todo with emojis ✅ 🚀 and special chars: Ñoël, café, 北京, москва\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						},
						"description": "Test with Unicode characters and emojis"
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Cases",
			"item": [
				{
					"name": "Get Todo - Non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"99999"
							]
						},
						"description": "Test retrieving a non-existent todo"
					},
					"response": []
				},
				{
					"name": "Update Todo - Non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Title\",\n    \"completed\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"99999"
							]
						},
						"description": "Test updating a non-existent todo"
					},
					"response": []
				},
				{
					"name": "Delete Todo - Non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"99999"
							]
						},
						"description": "Test deleting a non-existent todo"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Cleanup - Delete Max Length Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cleanup successful or todo already deleted\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos/{{max_length_todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{max_length_todo_id}}"
							]
						},
						"description": "Clean up max length todo"
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete Special Characters Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cleanup successful or todo already deleted\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos/{{special_chars_todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{special_chars_todo_id}}"
							]
						},
						"description": "Clean up special characters todo"
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete Unicode Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cleanup successful or todo already deleted\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos/{{unicode_todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{unicode_todo_id}}"
							]
						},
						"description": "Clean up unicode todo"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}